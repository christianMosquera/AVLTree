        -:    0:Source:binary_search_tree_tests.cpp
        -:    0:Graph:binary_search_tree_tests.gcno
        -:    0:Data:binary_search_tree_tests.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include "binary_search_tree.h"
        -:    3:
        -:    4:using std::cout;
        -:    5:using std::endl;
        -:    6:
        -:    7:/*****************************************************
        -:    8: **
        -:    9: ** File:    binary_search_tree_tests.cpp
        -:   10: ** Project: CSCE 221 Lab 4 Spring 2022
        -:   11: ** Author:  Christian Mosquera
        -:   12: ** Date:    03/21/22
        -:   13: ** Section: 510
        -:   14: ** Email:   cwbo.1701@tamu.edu
        -:   15: ** 
        -:   16: ** This file contains function calls to the binary
        -:   17: ** search tree data structure to test all the
        -:   18: ** functions associated with it.
        -:   19: **
        -:   20: *****************************************************/
        -:   21:
        1:   22:int main() {
        -:   23:
        -:   24:    //----------------------------------
        -:   25:    //
        -:   26:    // TEST NUMBER 1
        -:   27:    // Purpose: Test default constructor, 
        -:   28:    // copy constructor, insert, remove,
        -:   29:    // and print.
        -:   30:    //
        -:   31:    //----------------------------------
        -:   32:
        -:   33:    // Making tree1
        2:   34:    BinarySearchTree<int> tree1;
        1:   35:    tree1.insert(20);
        1:   36:    tree1.insert(10);
        1:   37:    tree1.insert(30);
        1:   38:    tree1.insert(40);
        1:   39:    tree1.insert(35);
        1:   40:    tree1.insert(35);
        1:   41:    tree1.insert(45);
        1:   42:    tree1.insert(37);
        -:   43:    
        1:   44:    std::cout << std::endl << "//----------------------------------" << std::endl << "//" << std::endl;
        1:   45:    std::cout << "// TEST NUMBER 1" << std::endl;
        1:   46:    std::cout << "// Purpose: Test default constructor," << std::endl << "// copy constructor, insert, remove,";
        1:   47:    cout << std::endl << "// and print" << std::endl <<"//" << std::endl;
        1:   48:    std::cout << "//----------------------------------" << std::endl << std::endl;
        -:   49:
        -:   50:    // Printing tree1 before
        1:   51:    cout << "// Before changes to tree1: " << endl << endl;
        1:   52:    tree1.print_tree();
        -:   53:
        -:   54:    // Making tree2
        2:   55:    BinarySearchTree<int> tree2(tree1);
        -:   56:    
        -:   57:
        -:   58:    // Changing tree1 and tree2 to ensure they are different
        -:   59:    
        1:   60:    tree1.remove(35);
        1:   61:    tree2.remove(40);
        1:   62:    tree2.remove(40);
        2:   63:    BinarySearchTree<int> tree14(tree1);
        1:   64:    tree14.insert(35);
        1:   65:    tree14.remove(40);
        -:   66:
        -:   67:    // Printing out after changes
        1:   68:    std::cout << endl;
        1:   69:    cout << "// After changes to tree1:" << endl << endl;
        1:   70:    tree1.print_tree();
        1:   71:    std::cout << endl;
        1:   72:    cout << "// After changes to tree2:" << endl << endl;
        1:   73:    tree2.print_tree();
        1:   74:    cout << endl;
        1:   75:    cout << "// After changes to tree14:" << endl << endl;
        1:   76:    tree14.print_tree();
        1:   77:    cout << endl;
        -:   78:
        -:   79:
        -:   80:
        -:   81:    //----------------------------------
        -:   82:    //
        -:   83:    // TEST NUMBER 2
        -:   84:    // Purpose: Test default constructor, 
        -:   85:    // copy assignment, insert, remove,
        -:   86:    // and print.
        -:   87:    //
        -:   88:    //----------------------------------
        -:   89:    
        -:   90:    // Making tree3
        2:   91:    BinarySearchTree<int> tree3;
        1:   92:    tree3.insert(32);
        1:   93:    tree3.insert(10);
        1:   94:    tree3.insert(14);
        1:   95:    tree3.insert(5);
        1:   96:    tree3.insert(51);
        1:   97:    tree3.insert(49);
        1:   98:    tree3.insert(16);
        1:   99:    tree3.insert(21);
        -:  100:
        1:  101:    std::cout << std::endl << "//----------------------------------" << std::endl << "//" << std::endl;
        1:  102:    std::cout << "// TEST NUMBER 2" << std::endl;
        1:  103:    std::cout << "// Purpose: Test default constructor," << std::endl << "// copy assignment, insert, remove,";
        1:  104:    cout << std::endl << "// and print" << std::endl <<"//" << std::endl;
        1:  105:    std::cout << "//----------------------------------" << std::endl << std::endl;
        -:  106:
        -:  107:    // Print tree3 before changes
        1:  108:    cout << "// Before changes to tree3: " << endl << endl;
        1:  109:    tree3.print_tree();
        -:  110:
        -:  111:    // Reusing tree1
        1:  112:    tree1 = tree3;
        -:  113:
        -:  114:    // Change tree3
        1:  115:    tree3.remove(49);
        1:  116:    tree1.insert(-1);
        -:  117:
        -:  118:    // Printing out tree1 and tree3 after changes
        1:  119:    std::cout << endl;
        1:  120:    cout << "// After changes to tree1:" << endl << endl;
        1:  121:    tree1.print_tree();
        1:  122:    std::cout << endl;
        1:  123:    cout << "// After changes to tree3:" << endl << endl;
        1:  124:    tree3.print_tree();
        1:  125:    cout << endl;
        -:  126:
        -:  127:
        -:  128:    //----------------------------------
        -:  129:    //
        -:  130:    // TEST NUMBER 3
        -:  131:    // Purpose: Test default constructor, 
        -:  132:    // copy assignment, insert, remove,
        -:  133:    // and print. This time all empty trees.
        -:  134:    //
        -:  135:    //----------------------------------
        -:  136:
        -:  137:    // Make tree4, tree5, and tree6
        2:  138:    BinarySearchTree<int> tree4;
        2:  139:    BinarySearchTree<int> tree5(tree4);
        2:  140:    BinarySearchTree<int> tree6;
        1:  141:    tree6.insert(5);
        -:  142:
        1:  143:    std::cout << std::endl << "//----------------------------------" << std::endl << "//" << std::endl;
        1:  144:    std::cout << "// TEST NUMBER 3" << std::endl;
        1:  145:    std::cout << "// Purpose: Test default constructor," << std::endl << "// copy assignment, insert, remove,";
        1:  146:    cout << std::endl << "// and print. This time all empty trees." << std::endl <<"//" << std::endl;
        1:  147:    std::cout << "//----------------------------------" << std::endl << std::endl;
        -:  148:
        -:  149:    // Print before changes
        1:  150:    cout << "// Before changes to tree4: " << endl << endl;
        1:  151:    tree4.print_tree();
        1:  152:    cout << "// Before changes to tree5: " << endl << endl;
        1:  153:    tree5.print_tree();
        1:  154:    cout << "// Before changes to tree6: " << endl << endl;
        1:  155:    tree6.print_tree();
        -:  156:
        -:  157:    // Self assign and copy assignment
        1:  158:    tree5 = tree5;
        1:  159:    tree4 = tree5;
        1:  160:    tree6 = tree4;
        -:  161:
        -:  162:    // Print after changes
        1:  163:    cout << endl;
        1:  164:    cout << "// After changes to tree4:" << endl << endl;
        1:  165:    tree4.print_tree();
        1:  166:    cout << "// After changes to tree5:" << endl << endl;
        1:  167:    tree5.print_tree();
        1:  168:    cout << "// After changes to tree6:" << endl << endl;
        1:  169:    tree6.print_tree();
        1:  170:    cout << endl;
        -:  171:
        -:  172:
        -:  173:    //----------------------------------
        -:  174:    //
        -:  175:    // TEST NUMBER 4
        -:  176:    // Purpose: Test default constructor, 
        -:  177:    // contains, insert, remove, and print.
        -:  178:    //
        -:  179:    //----------------------------------
        -:  180:
        -:  181:
        -:  182:    // Make tree7
        2:  183:    BinarySearchTree<int> tree7;
        1:  184:    tree7.insert(43);
        1:  185:    tree7.insert(4);
        1:  186:    tree7.insert(29);
        1:  187:    tree7.insert(35);
        1:  188:    tree7.insert(42);
        1:  189:    tree7.insert(99);
        1:  190:    tree7.insert(31);
        -:  191:    
        -:  192:
        1:  193:    std::cout << "//----------------------------------" << std::endl << "//" << std::endl;
        1:  194:    std::cout << "// TEST NUMBER 4" << std::endl;
        1:  195:    std::cout << "// Purpose: Test default constructor," << std::endl << "// contains, insert, remove, and print.";
        1:  196:    cout << std::endl <<"//" << std::endl;
        1:  197:    std::cout << "//----------------------------------" << std::endl << std::endl;
        -:  198:
        -:  199:
        -:  200:    // Print out the tree
        1:  201:    cout << "// tree7:" << endl << endl;
        1:  202:    tree7.print_tree();
        1:  203:    cout << endl;
        -:  204:
        -:  205:    // Does contain check
        1:  206:    cout << "// Testing 35: ";
        1:  207:    if (tree7.contains(35)) {
        1:  208:        cout << "tree7 contains 35" << endl;
        -:  209:    }
        -:  210:    else{
    #####:  211:        cout << "tree7 does not contain 35" << endl;
        -:  212:    }
        -:  213:
        -:  214:    // Does not contain check
        1:  215:    cout << "// Testing 100: ";
        1:  216:    if (tree7.contains(100)) {
    #####:  217:        cout << "tree7 contains 100" << endl;
        -:  218:    }
        -:  219:    else {
        1:  220:        cout << "tree7 does not contain 100" << endl;
        -:  221:    }
        1:  222:    cout << endl;
        -:  223:
        -:  224:
        -:  225:    //----------------------------------
        -:  226:    //
        -:  227:    // TEST NUMBER 5
        -:  228:    // Purpose: Test default constructor, 
        -:  229:    // find_max, find_min, insert, remove, 
        -:  230:    // and print.
        -:  231:    //
        -:  232:    //----------------------------------
        -:  233:
        2:  234:    BinarySearchTree<int> tree8;
        2:  235:    BinarySearchTree<int> tree9;
        2:  236:    BinarySearchTree<int> tree10;
        2:  237:    BinarySearchTree<int> tree11;
        -:  238:
        -:  239:    // Empty tree
        2:  240:    BinarySearchTree<int> tree12;
        -:  241:
        -:  242:    // Right skewed tree
        1:  243:    tree8.insert(10);
        1:  244:    tree8.insert(15);
        1:  245:    tree8.insert(20);
        -:  246:
        -:  247:    // Left skewed tree
        1:  248:    tree9.insert(5);
        1:  249:    tree9.insert(0);
        1:  250:    tree9.insert(-5);
        -:  251:
        -:  252:    // Single node tree
        1:  253:    tree10.insert(20);
        -:  254:
        -:  255:    // Normal tree
        1:  256:    tree11.insert(20);
        1:  257:    tree11.insert(10);
        1:  258:    tree11.insert(5);
        1:  259:    tree11.insert(8);
        1:  260:    tree11.insert(30);
        1:  261:    tree11.insert(25);
        1:  262:    tree11.insert(40);
        1:  263:    tree11.insert(-1);
        -:  264:
        -:  265:
        1:  266:    cout << endl << "//----------------------------------" << endl << "//" << endl;
        1:  267:    cout << "// TEST NUMBER 5" << endl;
        1:  268:    cout << "// Purpose: Test default constructor," << endl << "// find_max, find_min, insert, remove," << endl;
        1:  269:    cout << "// and print.";
        1:  270:    cout << endl <<"//" << endl;
        1:  271:    cout << "//----------------------------------" << endl << endl;
        -:  272:
        -:  273:
        -:  274:    // Print trees
        1:  275:    cout << "// tree8:" << endl << endl;
        1:  276:    tree8.print_tree();
        1:  277:    cout << endl;
        -:  278:
        1:  279:    cout << "// tree9:" << endl << endl;
        1:  280:    tree9.print_tree();
        1:  281:    cout << endl;
        -:  282:
        1:  283:    cout << "// tree10:" << endl << endl;
        1:  284:    tree10.print_tree();
        1:  285:    cout << endl;
        -:  286:
        1:  287:    cout << "// tree11:" << endl << endl;
        1:  288:    tree11.print_tree();
        1:  289:    cout << endl;
        -:  290:
        1:  291:    cout << "// tree12:" << endl << endl;
        1:  292:    tree12.print_tree();
        1:  293:    cout << endl;
        -:  294:
        -:  295:
        -:  296:    // Find min and max
        1:  297:    cout << "// Minimum value of tree8: ";
        1:  298:    cout << tree8.find_min() << endl;
        1:  299:    cout << "// Maximum value of tree8: ";
        1:  300:    cout << tree8.find_max() << endl;
        1:  301:    cout << endl;
        -:  302:
        1:  303:    cout << "// Minimum value of tree9: ";
        1:  304:    cout << tree9.find_min() << endl;
        1:  305:    cout << "// Maximum value of tree9: ";
        1:  306:    cout << tree9.find_max() << endl;
        1:  307:    cout << endl;
        -:  308:
        1:  309:    cout << "// Minimum value of tree10: ";
        1:  310:    cout << tree10.find_min() << endl;
        1:  311:    cout << "// Maximum value of tree10: ";
        1:  312:    cout << tree10.find_max() << endl;
        1:  313:    cout << endl;
        -:  314:
        1:  315:    cout << "// Minimum value of tree11: ";
        1:  316:    cout << tree11.find_min() << endl;
        1:  317:    cout << "// Maximum value of tree11: ";
        1:  318:    cout << tree11.find_max() << endl;
        1:  319:    cout << endl;
        -:  320:
        -:  321:    // Tree12 empty error check
        -:  322:    try {
        1:  323:        cout << "// Minimum value of tree12: ";
       1*:  324:        cout << tree12.find_min() << endl;
        -:  325:    }
        2:  326:    catch (std::invalid_argument& e) {
        1:  327:        cout << e.what() << endl;
        -:  328:    }
        -:  329:
        -:  330:    try {
        1:  331:        cout << "// Maximum value of tree12: ";
       1*:  332:        cout << tree12.find_max() << endl;
        -:  333:    }
        2:  334:    catch (std::invalid_argument& e) {
        1:  335:        cout << e.what() << endl;
        -:  336:    }
        -:  337:
        1:  338:    cout << endl;
        -:  339:
        -:  340:
        -:  341:    //----------------------------------
        -:  342:    //
        -:  343:    // TEST NUMBER 6
        -:  344:    // Purpose: Test default constructor, 
        -:  345:    // is_empty, make_empty, insert, remove, 
        -:  346:    // and print.
        -:  347:    //
        -:  348:    //----------------------------------
        -:  349:
        -:  350:    // Make tree13
        2:  351:    BinarySearchTree<int> tree13;
        1:  352:    tree13.insert(12);
        1:  353:    tree13.insert(14);
        1:  354:    tree13.insert(5);
        1:  355:    tree13.insert(2);
        1:  356:    tree13.insert(7);
        1:  357:    tree13.insert(22);
        1:  358:    tree13.insert(17);
        1:  359:    tree13.insert(49);
        -:  360:
        -:  361:
        1:  362:    cout << endl << "//----------------------------------" << endl << "//" << endl;
        1:  363:    cout << "// TEST NUMBER 6" << endl;
        1:  364:    cout << "// Purpose: Test default constructor," << endl << "// make_empty, is_empty, insert, remove," << endl;
        1:  365:    cout << "// and print.";
        1:  366:    cout << endl <<"//" << endl;
        1:  367:    cout << "//----------------------------------" << endl << endl;
        -:  368:
        -:  369:
        -:  370:    // Print tree13
        1:  371:    cout << "// tree13:" << endl << endl;
        1:  372:    tree13.print_tree();
        1:  373:    cout << endl;
        -:  374:
        -:  375:    // Check if empty
        1:  376:    if (tree13.is_empty()) {
    #####:  377:        cout << "// Tree is empty" << endl;
        -:  378:    }
        -:  379:    else {
        1:  380:        cout << "// Tree is not empty" << endl;
        -:  381:    }
        -:  382:
        -:  383:    // Make tree13 empty
        1:  384:    tree13.make_empty();
        1:  385:    if (tree13.is_empty()) {
        1:  386:        cout << "// Tree is empty" << endl;
        -:  387:    }
        -:  388:    else {
    #####:  389:        cout << "// Tree is not empty" << endl;
        -:  390:    }
        1:  391:    cout << endl;
        -:  392:
        -:  393:
        -:  394:
        -:  395:    //----------------------------------
        -:  396:    //
        -:  397:    // TEST NUMBER 7
        -:  398:    // Purpose: Test a bunch of different 
        -:  399:    // binary trees.
        -:  400:    //
        -:  401:    //----------------------------------
        -:  402:
        -:  403:
        -:  404:    // Making tree15
        2:  405:    BinarySearchTree<int> tree15;
        1:  406:    tree15.insert(34);
        1:  407:    tree15.insert(12);
        1:  408:    tree15.insert(23);
        1:  409:    tree15.insert(54);
        1:  410:    tree15.insert(21);
        1:  411:    tree15.insert(4);
        1:  412:    tree15.insert(45);
        1:  413:    tree15.remove(54);
        -:  414:
        -:  415:    // Make tree16 big
        2:  416:    BinarySearchTree<int> tree16(tree15);
        -:  417:
        1:  418:    tree16.insert(34);
        1:  419:    tree16.insert(12);
        1:  420:    tree16.insert(23);
        1:  421:    tree16.insert(54);
        1:  422:    tree16.insert(21);
        1:  423:    tree16.insert(4);
        1:  424:    tree16.insert(45);
        1:  425:    tree16.insert(49);
        1:  426:    tree16.insert(75);
        1:  427:    tree16.insert(1);
        1:  428:    tree16.insert(2);
        1:  429:    tree16.insert(3);
        1:  430:    tree16.insert(5);
        1:  431:    tree16.insert(9);
        1:  432:    tree16.insert(65);
        1:  433:    tree16.insert(24);
        1:  434:    tree16.insert(17);
        1:  435:    tree16.insert(95);
        -:  436:
        -:  437:    // tree17 even bigger
        2:  438:    BinarySearchTree<int> tree17(tree16);
        -:  439:
        1:  440:    tree17.insert(81);
        1:  441:    tree17.insert(95);
        1:  442:    tree17.insert(64);
        1:  443:    tree17.insert(15);
        1:  444:    tree17.insert(71);
        1:  445:    tree17.insert(11);
        1:  446:    tree17.insert(39);
        1:  447:    tree17.insert(31);
        1:  448:    tree17.insert(51);
        1:  449:    tree17.insert(61);
        1:  450:    tree17.insert(82);
        1:  451:    tree17.insert(99);
        1:  452:    tree17.insert(100);
        1:  453:    tree17.insert(46);
        1:  454:    tree17.insert(78);
        1:  455:    tree17.insert(97);
        1:  456:    tree17.insert(38);
        1:  457:    tree17.insert(83);
        1:  458:    tree17.insert(23);
        1:  459:    tree17.insert(101);
        -:  460:
        -:  461:    // tree18 even bigger with negative numbers
        2:  462:    BinarySearchTree<int> tree18(tree17);
        1:  463:    tree18.insert(-50);
        1:  464:    tree18.insert(-95);
        1:  465:    tree18.insert(-64);
        1:  466:    tree18.insert(-15);
        1:  467:    tree18.insert(-71);
        1:  468:    tree18.insert(-11);
        1:  469:    tree18.insert(-39);
        1:  470:    tree18.insert(-31);
        1:  471:    tree18.insert(-51);
        1:  472:    tree18.insert(-61);
        1:  473:    tree18.insert(-82);
        1:  474:    tree18.insert(-99);
        1:  475:    tree18.insert(-100);
        1:  476:    tree18.insert(-46);
        1:  477:    tree18.insert(-78);
        1:  478:    tree18.insert(-97);
        1:  479:    tree18.insert(-38);
        1:  480:    tree18.insert(-83);
        1:  481:    tree18.insert(-23);
        1:  482:    tree18.insert(-101);
        -:  483:
        1:  484:    cout << endl << "//----------------------------------" << endl << "//" << endl;
        1:  485:    cout << "// TEST NUMBER 7" << endl;
        1:  486:    cout << "// Purpose: Test default constructor," << endl << "// make_empty, is_empty, insert, remove," << endl;
        1:  487:    cout << "// and print.";
        1:  488:    cout << endl <<"//" << endl;
        1:  489:    cout << "//----------------------------------" << endl << endl;
        -:  490:
        -:  491:    // print out tree 15
        1:  492:    cout << "// tree15:" << endl << endl;
        1:  493:    tree15.print_tree();
        1:  494:    cout << endl;
        -:  495:
        -:  496:    // print out tree 16
        1:  497:    cout << "// tree16:" << endl << endl;
        1:  498:    tree16.print_tree();
        1:  499:    cout << endl;
        -:  500:
        -:  501:    // print out tree 17
        1:  502:    cout << "// tree17:" << endl << endl;
        1:  503:    tree17.print_tree();
        1:  504:    cout << endl;
        -:  505:
        -:  506:    // print out tree 18
        1:  507:    cout << "// tree18:" << endl << endl;
        1:  508:    tree18.print_tree();
        1:  509:    cout << endl;
        -:  510:
        -:  511:    // test min and max
        1:  512:    cout << "// Minimum value of tree15: ";
        1:  513:    cout << tree15.find_min() << endl;
        1:  514:    cout << "// Maximum value of tree15: ";
        1:  515:    cout << tree15.find_max() << endl;
        1:  516:    cout << endl;
        -:  517:
        1:  518:    cout << "// Minimum value of tree16: ";
        1:  519:    cout << tree16.find_min() << endl;
        1:  520:    cout << "// Maximum value of tree16: ";
        1:  521:    cout << tree16.find_max() << endl;
        1:  522:    cout << endl;
        -:  523:
        1:  524:    cout << "// Minimum value of tree17: ";
        1:  525:    cout << tree17.find_min() << endl;
        1:  526:    cout << "// Maximum value of tree17: ";
        1:  527:    cout << tree17.find_max() << endl;
        1:  528:    cout << endl;
        -:  529:
        1:  530:    cout << "// Minimum value of tree18: ";
        1:  531:    cout << tree18.find_min() << endl;
        1:  532:    cout << "// Maximum value of tree18: ";
        1:  533:    cout << tree18.find_max() << endl;
        1:  534:    cout << endl << endl;
        -:  535:
        -:  536:
        -:  537:    // Does contain check
        1:  538:    cout << "// Testing tree15 for containing elements:" << endl << endl;
        -:  539:    
        1:  540:    cout << "// Testing 35: ";
        1:  541:    if (tree15.contains(35)) {
    #####:  542:        cout << "tree15 contains 35" << endl;
        -:  543:    }
        -:  544:    else{
        1:  545:        cout << "tree15 does not contain 35" << endl;
        -:  546:    }
        -:  547:
        1:  548:    cout << "// Testing 76: ";
        1:  549:    if (tree15.contains(76)) {
    #####:  550:        cout << "tree15 contains 76" << endl;
        -:  551:    }
        -:  552:    else{
        1:  553:        cout << "tree15 does not contain 76" << endl;
        -:  554:    }
        -:  555:    
        1:  556:    cout << "// Testing 12: ";
        1:  557:    if (tree15.contains(12)) {
        1:  558:        cout << "tree15 contains 12" << endl;
        -:  559:    }
        -:  560:    else{
    #####:  561:        cout << "tree15 does not contain 12" << endl;
        -:  562:    }
        -:  563:
        1:  564:    cout << "// Testing 67: ";
        1:  565:    if (tree15.contains(67)) {
    #####:  566:        cout << "tree15 contains 67" << endl;
        -:  567:    }
        -:  568:    else{
        1:  569:        cout << "tree15 does not contain 67" << endl;
        -:  570:    }
        -:  571:
        1:  572:    cout << "// Testing 22: ";
        1:  573:    if (tree15.contains(22)) {
    #####:  574:        cout << "tree15 contains 22" << endl;
        -:  575:    }
        -:  576:    else{
        1:  577:        cout << "tree15 does not contain 22" << endl;
        -:  578:    }
        -:  579:
        1:  580:    cout << "// Testing 54: ";
        1:  581:    if (tree15.contains(54)) {
    #####:  582:        cout << "tree15 contains 54" << endl;
        -:  583:    }
        -:  584:    else{
        1:  585:        cout << "tree15 does not contain 54" << endl;
        -:  586:    }
        -:  587:
        1:  588:    cout << "// Testing 101: ";
        1:  589:    if (tree15.contains(101)) {
    #####:  590:        cout << "tree15 contains 101" << endl;
        -:  591:    }
        -:  592:    else{
        1:  593:        cout << "tree15 does not contain 101" << endl;
        -:  594:    }
        -:  595:
        1:  596:    cout << "// Testing -50: ";
        1:  597:    if (tree15.contains(-50)) {
    #####:  598:        cout << "tree15 contains -50" << endl;
        -:  599:    }
        -:  600:    else{
        1:  601:        cout << "tree15 does not contain -50" << endl;
        -:  602:    }
        -:  603:
        1:  604:    cout << "// Testing -101: ";
        1:  605:    if (tree15.contains(-101)) {
    #####:  606:        cout << "tree15 contains -101" << endl;
        -:  607:    }
        -:  608:    else{
        1:  609:        cout << "tree15 does not contain -101" << endl;
        -:  610:    }
        -:  611:
        1:  612:    cout << "// Testing -12: ";
        1:  613:    if (tree15.contains(-12)) {
    #####:  614:        cout << "tree15 contains -12" << endl;
        -:  615:    }
        -:  616:    else{
        1:  617:        cout << "tree15 does not contain -12" << endl;
        -:  618:    }
        -:  619:
        1:  620:    cout << "// Testing -23: ";
        1:  621:    if (tree15.contains(-23)) {
    #####:  622:        cout << "tree15 contains -23" << endl;
        -:  623:    }
        -:  624:    else{
        1:  625:        cout << "tree15 does not contain -23" << endl;
        -:  626:    }
        -:  627:
        1:  628:    cout << "// Testing 65: ";
        1:  629:    if (tree15.contains(65)) {
    #####:  630:        cout << "tree15 contains 65" << endl;
        -:  631:    }
        -:  632:    else{
        1:  633:        cout << "tree15 does not contain 65" << endl;
        -:  634:    }
        -:  635:
        1:  636:    cout << "// Testing 21: ";
        1:  637:    if (tree15.contains(21)) {
        1:  638:        cout << "tree15 contains 21" << endl;
        -:  639:    }
        -:  640:    else{
    #####:  641:        cout << "tree15 does not contain 21" << endl;
        -:  642:    }
        -:  643:
        1:  644:    cout << endl << endl;
        -:  645:
        -:  646:
        -:  647:
        1:  648:    cout << "// Testing tree16 for containing elements:" << endl << endl;
        -:  649:    
        1:  650:    cout << "// Testing 35: ";
        1:  651:    if (tree16.contains(35)) {
    #####:  652:        cout << "tree16 contains 35" << endl;
        -:  653:    }
        -:  654:    else{
        1:  655:        cout << "tree16 does not contain 35" << endl;
        -:  656:    }
        -:  657:
        1:  658:    cout << "// Testing 76: ";
        1:  659:    if (tree16.contains(76)) {
    #####:  660:        cout << "tree16 contains 76" << endl;
        -:  661:    }
        -:  662:    else{
        1:  663:        cout << "tree16 does not contain 76" << endl;
        -:  664:    }
        -:  665:    
        1:  666:    cout << "// Testing 12: ";
        1:  667:    if (tree16.contains(12)) {
        1:  668:        cout << "tree16 contains 12" << endl;
        -:  669:    }
        -:  670:    else{
    #####:  671:        cout << "tree16 does not contain 12" << endl;
        -:  672:    }
        -:  673:
        1:  674:    cout << "// Testing 67: ";
        1:  675:    if (tree16.contains(67)) {
    #####:  676:        cout << "tree16 contains 67" << endl;
        -:  677:    }
        -:  678:    else{
        1:  679:        cout << "tree16 does not contain 67" << endl;
        -:  680:    }
        -:  681:
        1:  682:    cout << "// Testing 22: ";
        1:  683:    if (tree16.contains(22)) {
    #####:  684:        cout << "tree16 contains 22" << endl;
        -:  685:    }
        -:  686:    else{
        1:  687:        cout << "tree16 does not contain 22" << endl;
        -:  688:    }
        -:  689:
        1:  690:    cout << "// Testing 54: ";
        1:  691:    if (tree16.contains(54)) {
        1:  692:        cout << "tree16 contains 54" << endl;
        -:  693:    }
        -:  694:    else{
    #####:  695:        cout << "tree16 does not contain 54" << endl;
        -:  696:    }
        -:  697:
        1:  698:    cout << "// Testing 101: ";
        1:  699:    if (tree16.contains(101)) {
    #####:  700:        cout << "tree16 contains 101" << endl;
        -:  701:    }
        -:  702:    else{
        1:  703:        cout << "tree16 does not contain 101" << endl;
        -:  704:    }
        -:  705:
        1:  706:    cout << "// Testing -50: ";
        1:  707:    if (tree16.contains(-50)) {
    #####:  708:        cout << "tree16 contains -50" << endl;
        -:  709:    }
        -:  710:    else{
        1:  711:        cout << "tree16 does not contain -50" << endl;
        -:  712:    }
        -:  713:
        1:  714:    cout << "// Testing -101: ";
        1:  715:    if (tree16.contains(-101)) {
    #####:  716:        cout << "tree16 contains -101" << endl;
        -:  717:    }
        -:  718:    else{
        1:  719:        cout << "tree16 does not contain -101" << endl;
        -:  720:    }
        -:  721:
        1:  722:    cout << "// Testing -12: ";
        1:  723:    if (tree16.contains(-12)) {
    #####:  724:        cout << "tree16 contains -12" << endl;
        -:  725:    }
        -:  726:    else{
        1:  727:        cout << "tree16 does not contain -12" << endl;
        -:  728:    }
        -:  729:
        1:  730:    cout << "// Testing -23: ";
        1:  731:    if (tree16.contains(-23)) {
    #####:  732:        cout << "tree16 contains -23" << endl;
        -:  733:    }
        -:  734:    else{
        1:  735:        cout << "tree16 does not contain -23" << endl;
        -:  736:    }
        -:  737:
        1:  738:    cout << "// Testing 65: ";
        1:  739:    if (tree16.contains(65)) {
        1:  740:        cout << "tree16 contains 65" << endl;
        -:  741:    }
        -:  742:    else{
    #####:  743:        cout << "tree16 does not contain 65" << endl;
        -:  744:    }
        -:  745:
        1:  746:    cout << "// Testing 21: ";
        1:  747:    if (tree16.contains(21)) {
        1:  748:        cout << "tree16 contains 21" << endl;
        -:  749:    }
        -:  750:    else{
    #####:  751:        cout << "tree16 does not contain 21" << endl;
        -:  752:    }
        -:  753:
        1:  754:    cout << endl << endl;
        -:  755:
        -:  756:
        1:  757:    cout << "// Testing tree17 for containing elements:" << endl << endl;
        -:  758:    
        1:  759:    cout << "// Testing 35: ";
        1:  760:    if (tree17.contains(35)) {
    #####:  761:        cout << "tree17 contains 35" << endl;
        -:  762:    }
        -:  763:    else{
        1:  764:        cout << "tree17 does not contain 35" << endl;
        -:  765:    }
        -:  766:
        1:  767:    cout << "// Testing 76: ";
        1:  768:    if (tree17.contains(76)) {
    #####:  769:        cout << "tree17 contains 76" << endl;
        -:  770:    }
        -:  771:    else{
        1:  772:        cout << "tree17 does not contain 76" << endl;
        -:  773:    }
        -:  774:    
        1:  775:    cout << "// Testing 12: ";
        1:  776:    if (tree17.contains(12)) {
        1:  777:        cout << "tree17 contains 12" << endl;
        -:  778:    }
        -:  779:    else{
    #####:  780:        cout << "tree17 does not contain 12" << endl;
        -:  781:    }
        -:  782:
        1:  783:    cout << "// Testing 67: ";
        1:  784:    if (tree17.contains(67)) {
    #####:  785:        cout << "tree17 contains 67" << endl;
        -:  786:    }
        -:  787:    else{
        1:  788:        cout << "tree17 does not contain 67" << endl;
        -:  789:    }
        -:  790:
        1:  791:    cout << "// Testing 22: ";
        1:  792:    if (tree17.contains(22)) {
    #####:  793:        cout << "tree17 contains 22" << endl;
        -:  794:    }
        -:  795:    else{
        1:  796:        cout << "tree17 does not contain 22" << endl;
        -:  797:    }
        -:  798:
        1:  799:    cout << "// Testing 54: ";
        1:  800:    if (tree17.contains(54)) {
        1:  801:        cout << "tree17 contains 54" << endl;
        -:  802:    }
        -:  803:    else{
    #####:  804:        cout << "tree17 does not contain 54" << endl;
        -:  805:    }
        -:  806:
        1:  807:    cout << "// Testing 101: ";
        1:  808:    if (tree17.contains(101)) {
        1:  809:        cout << "tree17 contains 101" << endl;
        -:  810:    }
        -:  811:    else{
    #####:  812:        cout << "tree17 does not contain 101" << endl;
        -:  813:    }
        -:  814:
        1:  815:    cout << "// Testing -50: ";
        1:  816:    if (tree17.contains(-50)) {
    #####:  817:        cout << "tree17 contains -50" << endl;
        -:  818:    }
        -:  819:    else{
        1:  820:        cout << "tree17 does not contain -50" << endl;
        -:  821:    }
        -:  822:
        1:  823:    cout << "// Testing -101: ";
        1:  824:    if (tree17.contains(-101)) {
    #####:  825:        cout << "tree17 contains -101" << endl;
        -:  826:    }
        -:  827:    else{
        1:  828:        cout << "tree17 does not contain -101" << endl;
        -:  829:    }
        -:  830:
        1:  831:    cout << "// Testing -12: ";
        1:  832:    if (tree17.contains(-12)) {
    #####:  833:        cout << "tree17 contains -12" << endl;
        -:  834:    }
        -:  835:    else{
        1:  836:        cout << "tree17 does not contain -12" << endl;
        -:  837:    }
        -:  838:
        1:  839:    cout << "// Testing -23: ";
        1:  840:    if (tree17.contains(-23)) {
    #####:  841:        cout << "tree17 contains -23" << endl;
        -:  842:    }
        -:  843:    else{
        1:  844:        cout << "tree17 does not contain -23" << endl;
        -:  845:    }
        -:  846:
        1:  847:    cout << "// Testing 65: ";
        1:  848:    if (tree17.contains(65)) {
        1:  849:        cout << "tree17 contains 65" << endl;
        -:  850:    }
        -:  851:    else{
    #####:  852:        cout << "tree17 does not contain 65" << endl;
        -:  853:    }
        -:  854:
        1:  855:    cout << "// Testing 21: ";
        1:  856:    if (tree17.contains(21)) {
        1:  857:        cout << "tree17 contains 21" << endl;
        -:  858:    }
        -:  859:    else{
    #####:  860:        cout << "tree17 does not contain 21" << endl;
        -:  861:    }
        -:  862:
        1:  863:    cout << endl << endl;
        -:  864:
        -:  865:
        1:  866:    cout << "// Testing tree18 for containing elements:" << endl << endl;
        -:  867:    
        1:  868:    cout << "// Testing 35: ";
        1:  869:    if (tree18.contains(35)) {
    #####:  870:        cout << "tree18 contains 35" << endl;
        -:  871:    }
        -:  872:    else{
        1:  873:        cout << "tree18 does not contain 35" << endl;
        -:  874:    }
        -:  875:
        1:  876:    cout << "// Testing 76: ";
        1:  877:    if (tree18.contains(76)) {
    #####:  878:        cout << "tree18 contains 76" << endl;
        -:  879:    }
        -:  880:    else{
        1:  881:        cout << "tree18 does not contain 76" << endl;
        -:  882:    }
        -:  883:    
        1:  884:    cout << "// Testing 12: ";
        1:  885:    if (tree18.contains(12)) {
        1:  886:        cout << "tree18 contains 12" << endl;
        -:  887:    }
        -:  888:    else{
    #####:  889:        cout << "tree18 does not contain 12" << endl;
        -:  890:    }
        -:  891:
        1:  892:    cout << "// Testing 67: ";
        1:  893:    if (tree18.contains(67)) {
    #####:  894:        cout << "tree18 contains 67" << endl;
        -:  895:    }
        -:  896:    else{
        1:  897:        cout << "tree18 does not contain 67" << endl;
        -:  898:    }
        -:  899:
        1:  900:    cout << "// Testing 22: ";
        1:  901:    if (tree18.contains(22)) {
    #####:  902:        cout << "tree18 contains 22" << endl;
        -:  903:    }
        -:  904:    else{
        1:  905:        cout << "tree18 does not contain 22" << endl;
        -:  906:    }
        -:  907:
        1:  908:    cout << "// Testing 54: ";
        1:  909:    if (tree18.contains(54)) {
        1:  910:        cout << "tree18 contains 54" << endl;
        -:  911:    }
        -:  912:    else{
    #####:  913:        cout << "tree18 does not contain 54" << endl;
        -:  914:    }
        -:  915:
        1:  916:    cout << "// Testing 101: ";
        1:  917:    if (tree18.contains(101)) {
        1:  918:        cout << "tree18 contains 101" << endl;
        -:  919:    }
        -:  920:    else{
    #####:  921:        cout << "tree18 does not contain 101" << endl;
        -:  922:    }
        -:  923:
        1:  924:    cout << "// Testing -50: ";
        1:  925:    if (tree18.contains(-50)) {
        1:  926:        cout << "tree18 contains -50" << endl;
        -:  927:    }
        -:  928:    else{
    #####:  929:        cout << "tree18 does not contain -50" << endl;
        -:  930:    }
        -:  931:
        1:  932:    cout << "// Testing -101: ";
        1:  933:    if (tree18.contains(-101)) {
        1:  934:        cout << "tree18 contains -101" << endl;
        -:  935:    }
        -:  936:    else{
    #####:  937:        cout << "tree18 does not contain -101" << endl;
        -:  938:    }
        -:  939:
        1:  940:    cout << "// Testing -12: ";
        1:  941:    if (tree18.contains(-12)) {
    #####:  942:        cout << "tree18 contains -12" << endl;
        -:  943:    }
        -:  944:    else{
        1:  945:        cout << "tree18 does not contain -12" << endl;
        -:  946:    }
        -:  947:
        1:  948:    cout << "// Testing -23: ";
        1:  949:    if (tree18.contains(-23)) {
        1:  950:        cout << "tree18 contains -23" << endl;
        -:  951:    }
        -:  952:    else{
    #####:  953:        cout << "tree18 does not contain -23" << endl;
        -:  954:    }
        -:  955:
        1:  956:    cout << "// Testing 65: ";
        1:  957:    if (tree18.contains(65)) {
        1:  958:        cout << "tree18 contains 65" << endl;
        -:  959:    }
        -:  960:    else{
    #####:  961:        cout << "tree18 does not contain 65" << endl;
        -:  962:    }
        -:  963:
        1:  964:    cout << "// Testing 21: ";
        1:  965:    if (tree18.contains(21)) {
        1:  966:        cout << "tree18 contains 21" << endl;
        -:  967:    }
        -:  968:    else{
    #####:  969:        cout << "tree18 does not contain 21" << endl;
        -:  970:    }
        -:  971:
        1:  972:    cout << endl << endl;
        -:  973:
        -:  974:
        -:  975:    // Testing make empty and is empty
        1:  976:    tree15.make_empty();
        1:  977:    tree16.make_empty();
        -:  978:
        1:  979:    if (tree15.is_empty()) {
        1:  980:        cout << "// tree15 is empty" << endl;
        -:  981:    }
        -:  982:    else{
    #####:  983:        cout << "// tree15 is not empty" << endl;
        -:  984:    }
        -:  985:
        1:  986:    if (tree16.is_empty()) {
        1:  987:        cout << "// tree16 is empty" << endl;
        -:  988:    }
        -:  989:    else{
    #####:  990:        cout << "// tree16 is not empty" << endl;
        -:  991:    }
        -:  992:
        1:  993:    if (tree17.is_empty()) {
    #####:  994:        cout << "// tree17 is empty" << endl;
        -:  995:    }
        -:  996:    else{
        1:  997:        cout << "// tree17 is not empty" << endl;
        -:  998:    }
        -:  999:
        1: 1000:    if (tree18.is_empty()) {
    #####: 1001:        cout << "// tree18 is empty" << endl;
        -: 1002:    }
        -: 1003:    else{
        1: 1004:        cout << "// tree18 is not empty" << endl;
        -: 1005:    }
        -: 1006:
        1: 1007:    cout << endl << endl;
        -: 1008:
        1: 1009:}
